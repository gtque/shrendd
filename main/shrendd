#!/bin/bash
set -euo pipefail

trap resetLocal EXIT

function resetLocal {
  if [ -f $_DEPLOY_ERROR_DIR/render_warning.log ]; then
    echo "warnings during shrendd:"
    cat $_DEPLOY_ERROR_DIR/render_warning.log | sed -e "s/^/  /g"
  fi
  if [ $? -ne 0 ] || [ -f $_DEPLOY_ERROR_DIR/render_error.log ]; then
    echo "It seems there was an error during the process. Please review the logs for more information."
    if [ -f $_DEPLOY_ERROR_DIR/render_error.log ]; then
      echo "errors during shrendd:"
      cat $_DEPLOY_ERROR_DIR/render_error.log | sed -e "s/^/  /g"
    fi
  fi
  if [ "$_is_debug" == true ]; then
    echo "running as debug, not deleting render directories"
  else
    echo "was live, should be deleting render directories"
    stageLeft
  fi
}
export _RED='\033[0;31m'
export _BLUE='\033[0;34m'
export _LIGHT_BLUE='\033[1;34m'
export _SUPER_GREEN='\033[0;32m'
export _YELLOW='\033[0;33m'
export _CLEAR_TEXT_COLOR='\033[0m' # No Color

function checkShrenddVersion {
  _UPSHRENDD_VERSION="0.0.0-dev"
  _SHRENDD_CURRENT_VERSION="$_UPSHRENDD_VERSION"
  if [ -f ./.shrendd/version.yml ]; then
    _SHRENDD_CURRENT_VERSION=$(yq e ".shrendd.version" ./.shrendd/version.yml)
  fi
  if [[ $_UPSHRENDD_VERSION == $_SHRENDD_CURRENT_VERSION ]]; then
    :
  else
    echo -e "${_TEXT_INFO}shrendd file does not match shrendd version, consider running ./.shrendd/upshrendd${_CLEAR_TEXT_COLOR}"
  fi
}

function checkCommand {
  if command -v "$1" &> /dev/null; then
    :
  else
    echo "'$1' not found, please make sure it is installed before using shrendd."
    if [ "$2" -gt 0 ]; then
      exit $2
    fi
  fi
}

function checkFile {
  if [ -f $1 ]; then
    echo "true"
  else
    echo "false"
  fi
}

function keysFor {
  echo $(echo -e "$1" | yq e "(.. | select(. == \"*\") | {(path | join(\".\")): .}) | keys " - | sed -e "s/\- //g")
}

function defaultShrendd {
  cat << 'EndOfYml'
shrendd:
  version: latest
  git:
    url: https://github.com/gtque/shrendd
  default:
    template:
      dir: $_MODULE_DIR/deploy/${target}/templates
    render:
      dir: $_MODULE_DIR/deploy/${target}/rendered
  text:
    error: $_RED
    warn: $_YELLOW
    pass: $_SUPER_GREEN
    info: $_LIGHT_BLUE
    debug: $_BLUE
  targets:
  - name: k8s
    description: just testing extra fields in the array element
  config:
    path: ./config
    validate: true
    unwind: true
    default: localdev.yml
    definition: $(shrenddOrDefault shrendd.config.path)/config-template.yml
  k8s:
    source: "cloneShrendd \"$_GETTER\" \"k8s\""
    yaml:
      padding: 2
  test:
    source: "cloneShrendd \"$_GETTER\" \"test\""
    local: ./main
EndOfYml
}

function devD {
  echo "you must be a developer of shrendd and running a test, copying latest '$1' from shrendd_src"
  if [ -d ./.shrendd/$1 ]; then
    rm -rf ./.shrendd/$1
  fi
  _source=$(shrenddOrDefault "shrendd.test.local")
  cp -rf $_source/$1 ./.shrendd/$1
  if [ "$1" == "render" ]; then
    echo "copy additional render scripts..."
    cp -rf $_source/deploy.sh ./.shrendd/
    cp -rf $_source/stub.sh ./.shrendd/
    cp -rf $_source/parse_parameters.sh ./.shrendd/
    cp -rf $_source/upshrendd ./.shrendd/
    cp -rf $_source/version.yml ./.shrendd/
  fi
}

function curlD {
  curl --output ./.shrendd/$1$2 -L "$3"
}

function wgetD {
  wget --output-document=./.shrendd/$1$2 "$3"
}

function trueName {
  echo "$(echo "$1" | sed -e "s/\./_/g" | tr "[:lower:]" "[:upper:]" | cut -d'[' -f1)"
}

function testIf {
  _parm=$(trueName $1)
  if [[ -n "${!_parm+x}" ]]; then
    echo "true"
    _value="$(echo ${!_parm})"
  else
    echo "false"
  fi
}

function shrenddOrDefaultDebug {
  _value=""
  echo "debugging..."
  trueName $1
  if [ "$(testIf $1)" == "true" ]; then
    echo "found truth!!!"
    _parm=$(trueName $1)
    _value="$(echo ${!_parm})"
  else
    echo "nothing found..."
    _value=$(echo "$_SHRENDD" | yq e ".$1" -)
    if [ -z "$_value" ] || [ "$_value" == "null" ]; then
      _value=$(echo "$_SHRENDD_DEFAULTS" | yq e ".$1" -)
    fi
  fi
  if [ -z "${2+x}" ] || [ "$2" -lt 1 ]; then
    echo $(eval echo "$_value")
  else
    echo -e "$_value"
  fi
  echo "...debugging"
}

function shrenddOrDefault {
  _value=""
  if [ "$(testIf $1)" == "true" ]; then
    _parm=$(trueName $1)
    _value="$(echo ${!_parm})"
  else
    _value=$(echo "$_SHRENDD" | yq e ".$1" -)
    if [ -z "$_value" ] || [ "$_value" == "null" ]; then
      _value=$(echo "$_SHRENDD_DEFAULTS" | yq e ".$1" -)
    fi
  fi
  if [ -z "${2+x}" ] || [ "$2" -lt 1 ]; then
    echo $(eval echo "$_value")
  else
    echo -e "$_value"
  fi
}

function getTargetsD {
  _targets="" #$(echo $_SHRENDD_CONFIG_KEYS | sed -e "s/\.targets\./gooch/g")"
  echo "looping over: $1"
  for _targ in $1; do
    echo "targ: $_targ"
    _targets="$_targets $(echo "$_targ" | grep ".targets.[0-9]\+.name" || echo "")"
  done
  echo "$_targets"
}

function getTargets {
  _targets="" #$(echo $_SHRENDD_CONFIG_KEYS | sed -e "s/\.targets\./gooch/g")"
  for _targ in $1; do
    _targets="$_targets $(echo "$_targ" | grep ".targets.[0-9]\+.name" || echo "")"
  done
  echo "$_targets"
}

function initColors {
  export _TEXT_ERROR=$(shrenddOrDefault "shrendd.text.error")
  export _TEXT_DEBUG=$(shrenddOrDefault "shrendd.text.debug")
  export _TEXT_INFO=$(shrenddOrDefault "shrendd.text.info")
  export _TEXT_PASS=$(shrenddOrDefault "shrendd.text.pass")
  export _TEXT_WARN=$(shrenddOrDefault "shrendd.text.warn")
}

function isUpToDate {
  if [ -z "$_SHRENDD_IS_UPTODATE" ] || [ "$_SHRENDD_IS_UPTODATE" == "null" ]; then
    if [ "$1" == "devD" ]; then
      export _SHRENDD_IS_UPTODATE="false"
    else
      if [ -f ./.shrendd/version.yml ]; then
        _SHRENDD_CURRENT_VERSION=$(yq e ".shrendd.version" ./.shrendd/version.yml)
        if [ "$_SHRENDD_VERSION" == "latest" ]; then
          if [ -d ./.shrendd/.latest ]; then
            rm -rf ./.shrendd/.latest
          fi
          mkdir ./.shrendd/.latest
          eval "$1 \".latest/version\" \".yml\" \"$3/version.yml\""
          _SHRENDD_LATEST_VERSION=$(yq e ".shrendd.version" ./.shrendd/.latest/version.yml)
          if [ "$_SHRENDD_LATEST_VERSION" == "$_SHRENDD_CURRENT_VERSION" ]; then
            export _SHRENDD_IS_UPTODATE="true"
          else
            export _SHRENDD_IS_UPTODATE="false"
          fi
        else
          if [ "$_SHRENDD_VERSION" == "$_SHRENDD_CURRENT_VERSION" ]; then
            export _SHRENDD_IS_UPTODATE="true"
          else
            export _SHRENDD_IS_UPTODATE="false"
          fi
        fi
      else
        export _SHRENDD_IS_UPTODATE="false"
      fi
    fi
    echo "$_SHRENDD_IS_UPTODATE"
  else
    if [ -d ./.shrendd/$2 ]; then
      echo "$_SHRENDD_IS_UPTODATE"
    else
      echo "false"
    fi
  fi
}

function initTargets {
  echo "getting keys for config"
  export _SHRENDD_CONFIG_KEYS=$(keysFor "$_SHRENDD")
  echo "getting keys for default"
  export _SHRENDD_DEFAULT_KEYS=$(keysFor "$_SHRENDD_DEFAULTS")
  echo "config keys: $_SHRENDD_CONFIG_KEYS"
  echo "default keys: $_SHRENDD_DEFAULT_KEYS"
  #getTargetsD "$_SHRENDD_CONFIG_KEYS"
  _target_keys=$(getTargets "$_SHRENDD_CONFIG_KEYS")
  echo "trying to load array of targets: $_target_keys"
  if [ -z "$(echo $_target_keys | sed -e "s/ //g")" ]; then
    echo "no targets... using default list"
    #getTargetsD "$_SHRENDD_DEFAULT_KEYS"
    _target_keys=$(getTargets "$_SHRENDD_DEFAULT_KEYS")
  fi

  _targets=""
  for index in $_target_keys; do
    _target=$(shrenddOrDefault "$index" 0)
    echo -e "checking: $_target"
    if [ -z "$_targets" ] || [ "$_targets" == "" ]; then
      :
    else
      _targets="$_targets "
    fi
    _targets="$_targets$_target"
    if [ $# -gt 0 ]; then
      _target_source=$(shrenddOrDefault "shrendd.${_target}.source" 1)
      #cloneShrendd "$_GETTER" "$_target"
      echo "shrendd.${_target}.source: ${_target_source}"
      eval "${_target_source}"
    fi
  done
  export targets="$_targets"
}

function cloneShrendd {
  if [ "$_SHRENDD_VERSION" == "latest" ]; then
    export _SHRENDD_ARTIFACT_URL="$_SHRENDD_GIT_URL/releases/latest/download"
  else
    export _SHRENDD_ARTIFACT_URL="$_SHRENDD_GIT_URL/releases/download/v$_SHRENDD_VERSION"
  fi
  export _SHRENDD_IS_UPTODATE_NOW=$(isUpToDate "$1" "$2" "$_SHRENDD_ARTIFACT_URL")
  echo "$2 uptodate: $_SHRENDD_IS_UPTODATE, now: $_SHRENDD_IS_UPTODATE_NOW"
  if [ -z "$_SHRENDD_IS_UPTODATE" ]; then
    export _SHRENDD_IS_UPTODATE="$_SHRENDD_IS_UPTODATE_NOW"
  fi
  if [ "$_SHRENDD_IS_UPTODATE_NOW" == "true" ]; then
    :
  else
    if [ -d ./.shrendd ]; then
      :
    else
      mkdir "./.shrendd"
    fi
    echo "downloading shrendd:$_SHRENDD_VERSION"
    if [ -d ./.shrendd/$2 ]; then
      rm -rf ./.shrendd/$2
    fi
    rm -f ./.shrendd/$2.zip
    echo "downloading with $1...$2"
    eval "$1 \"$2\" \".zip\" \"$_SHRENDD_ARTIFACT_URL/$2.zip\""
    if [ "$1" == "devD" ]; then
      echo "cloned locally, nothing to unzip."
    else
      echo "unzipping cloned file: $2.zip"
      unzip -ao ./.shrendd/$2.zip -d ./.shrendd
      rm ./.shrendd/$2.zip
    fi
  fi
}

#load shrendd.yml for properties
export _SHREND_YML="./shrendd.yml"
if [[ -n "${SHREND_YML+x}" ]]; then
  export _SHREND_YML="$SHREND_YML"
fi
if [ -f $_SHREND_YML ]; then
  export _SHRENDD=$(cat ./$_SHREND_YML)
  echo "found shrendd.yml, will use values defined there, if no value specified, will use default values."
else
  echo "no shrendd.yml found, using defaults. For more information on configuring shrendd, please see:"
  export _SHRENDD=""
fi
export _SHRENDD_DEFAULTS=$(defaultShrendd)
export TEST_SHRENDD_VERSION="hello world"
testIf "test.shrendd.version"
export _SHRENDD_VERSION=$(shrenddOrDefault "shrendd.version")
export _SHRENDD_GIT_URL=$(shrenddOrDefault "shrendd.git.url")
export SHRENDD_WORKING_DIR=$(pwd)
export _DEPLOY_ERROR_DIR="$SHRENDD_WORKING_DIR/.shrendd/errors"
echo "shrendd version: $_SHRENDD_VERSION"
initColors

#check for yq, error if not present with message
checkCommand "yq" 1

if [ -d $(shrenddOrDefault "shrendd.test.local") ]; then
  export _GETTER="devD"
else
  if [[ -z $(checkCommand "curl" 0) ]]; then
    export _GETTER="curlD"
  else
    if [[ -z $(checkCommand "wget" 0) ]]; then
      export _GETTER="wgetD"
    else
      echo "you must have curl or wget installed to use shrendd or you can manually down load it to a directory in this project called '.shrendd'."
      exit 1
    fi
  fi
fi

export _SHRENDD_IS_UPTODATE=""
cloneShrendd "$_GETTER" "render"

source ./.shrendd/parse_parameters.sh

##bootstrap any add ons or other stuff before shrendding.
if [ -f ./boot.shrendd ]; then
  echo "found a boot.shrendd file, sourcing it now..."
  source ./boot.shrendd
else
  echo "no boot.shrendd found"
fi

#loop over targets
initTargets "true"

if [[ -n "${_JUST_INITIALIZE+x}" ]]; then
  :
else
  export _JUST_INITIALIZE="true"
fi
if [ "$_JUST_INITIALIZE" == "true" ]; then
  checkShrenddVersion
  echo -e "${_TEXT_INFO}just initializing, nothing to see here.${_CLEAR_TEXT_COLOR}"
  exit 0
fi

export _config_path=$(shrenddOrDefault shrendd.config.path)/${_config}
echo "======================================================="
echo "                 best shrendds forever                 "
echo "using: $_config_path"
if [[ $_stub == "false" ]]; then
  source ./.shrendd/deploy.sh
else
  echo "stubbing: $_stub/toes"
  source ./.shrendd/stub.sh
fi
checkShrenddVersion