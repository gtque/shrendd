#!/bin/bash
set -euo pipefail

export _NEW_LINE_PLACE_HOLDER="_shrendd_new_line_axcvert5"
export _SPACE_PLACE_HOLDER="_shrendd_space_joasd7rfc"

function checkCommand {
  if command -v "$1" &> /dev/null; then
    :
  else
    echo "'$1' not found, please make sure it is installed before using shrendd."
    if [ "$2" -gt 0 ]; then
      exit $2
    fi
  fi
}

function checkFile {
  if [ -f "$1" ]; then
    echo "true"
  else
    echo "false"
  fi
}

function defaultShrendd {
  cat << 'EndOfYml'
shrendd:
  dir: $SHRENDD_WORKING_DIR/.shrendd
  get:
#   the default is the latest release, this url will redirect to the latest release
    src: https://github.com/gtque/shrendd/releases/latest/download/${GET_ARTIFACT}
#   below is an example of getting a specific version, as a reminder of how to specify a specific version
#    src: "https://github.com/gtque/shrendd/releases/download/v$(shrenddOrDefault "shrendd.version")/${GET_ARTIFACT}"
  version: latest
# version: 0.17.0-beta
EndOfYml
}

function devD {
  _source=$(shrenddOrDefault "shrendd.test.local")
  echo "you must be a developer of shrendd and running a test, copying latest '$1' from $_source"
  rm -f "$1"
  _clone=$(echo "$2" | sed 's/.*releases.*download//g' | sed 's/v.*\///g')
  if [ -d "$_source/$_clone" ]; then
    echo "seems like cloning a module"
    cp -f "$_source/$_clone/*" "$1"
  else
    echo "seems like cloning specific file"
    cp -f "$_source/$_clone" "$1"
    _VERSION=$(yq e ".shrendd.version" "$SHRENDD_DIR/version.yml")
    sed -i "s/_UPSHRENDD_VERSION=\".*\"/_UPSHRENDD_VERSION=\"$_VERSION\"/g" "$1"
  fi
}

function curlD {
  curl --output "$1" -L "$2"
}

function wgetD {
  wget --output-document="$1" "$2"
}

function trueName {
  echo "$(echo "$1" | sed -e "s/$_SPACE_PLACE_HOLDER/ /g" | sed -e "s/ /_/g" | sed -e "s/-/_/g" | sed -e "s/\./_/g" | sed -e "s/\\\"//g" | tr "[:lower:]" "[:upper:]" | sed "s/\[\"//g" | sed "s/\"\]//g" | cut -d'[' -f1)"
}

function testIf {
  _parm=$(trueName $1)
  echo "parm: $_parm"
  if [ -v "$_parm" ]; then
    echo "true"
    _value="$(echo ${!_parm})"
  else
    echo "false"
  fi
}

function shrenddOrDefault {
  _value=""
  if [ "$(testIf $1)" == true ]; then
    _parm=$(trueName $1)
    _value="$(echo ${!_parm})"
  else
    _value=$(echo "$_SHRENDD" | yq e ".$1" -)
    if [ -z "$_value" ] || [ "$_value" == "null" ]; then
      _value=$(echo "$_SHRENDD_DEFAULTS" | yq e ".$1" -)
    fi
  fi
  if [ -z "${2+x}" ] || [ "$2" -lt 1 ]; then
    echo $(eval echo "$_value")
  else
    echo -e "$_value"
  fi
}

function isUpToDate {
  if [ -f "$SHRENDD_DIR/targetversion.yml" ]; then
    export _TARGET_VERSION=$(yq e ".shrendd.version" "$SHRENDD_DIR/targetversion.yml")
  else
    #default if not found
    export _TARGET_VERSION="0.0.0-sp"
  fi
  _current_version=$(cat ./shrendd | grep "  _UPSHRENDD_VERSION" || echo "0.0.0-dev")
  _current_version=$(echo "$_current_version" | sed 's/  _UPSHRENDD_VERSION=//g' | sed 's/"//g')
  if [ "$_current_version" == "$_TARGET_VERSION" ]; then
    echo "true"
  else
    echo "false"
  fi
}

function isCompatible {
  if [ -f "$SHRENDD_DIR/targetversion.yml" ]; then
    export _TARGET_VERSION=$(yq e ".shrendd.upshrendd" "$SHRENDD_DIR/targetversion.yml")
    if [ -z "$_TARGET_VERSION" ] || [ "$_TARGET_VERSION" = "null" ]; then
      export _TARGET_VERSION=0
    fi
  else
    #default if not found
    export _TARGET_VERSION="0"
  fi
  _current_version=$(cat ./shrendd | grep "  _UPSHRENDD_VERSION" || echo "0.0.0-dev")
  _current_version=$(echo "$_current_version" | sed 's/  _UPSHRENDD_VERSION=//g' | sed 's/"//g')
  _current_version=$(echo "$_current_version" | cut -d'.' -f1)
  if (( _current_version >= _TARGET_VERSION )); then
    echo "true"
  else
    echo "false"
  fi
}

function isUpgrade {
  if [ -f "$SHRENDD_DIR/targetversion.yml" ]; then
    export _TARGET_VERSION=$(yq e ".shrendd.upshrendd" "$SHRENDD_DIR/targetversion.yml")
    if [ -z "$_TARGET_VERSION" ] || [ "$_TARGET_VERSION" = "null" ]; then
      export _TARGET_VERSION=0
    fi
  else
    #default if not found
    export _TARGET_VERSION="0"
  fi
  _current_version=$(yq e ".shrendd.upshrendd" "$SHRENDD_DIR/version.yml")
  if [ -z "$_current_version" ] || [ "$_current_version" = "null" ]; then
    export _current_version="0"
  fi
  if (( "$_current_version" <= "$_TARGET_VERSION" )); then
    echo "true"
  else
    echo "false"
  fi
}

function setGettingArtifact {
  export GET_ARTIFACT="$1"
  export GET_ARTIFACT_ID=$(echo "${1}.." | cut -d'.' -f1)
  export GET_ARTIFACT_EXTENSION=$(echo "${1}.." | cut -d'.' -f2)
}

function cloneShrendd {
  echo "cloning shrendd"
  rm -f "$SHRENDD_DIR/targetversion.yml"
  setGettingArtifact "version.yml"
  eval "$1 \"$SHRENDD_DIR/targetversion.yml\" \"$(shrenddOrDefault shrendd.get.src)\""
  echo "retrieved target version."
  export _SHRENDD_IS_UPTODATE_NOW=$(isUpToDate)
  export _SHRENDD_IS_COMPATIBLE=$(isCompatible)
  export _SHRENDD_IS_UPGRADE=$(isUpgrade)
  _force_message="false"
  if [ "$_SHRENDD_IS_UPTODATE_NOW" == "true" ]; then
    echo "seems shrendd is already up to date."
  else
    if [ -f "$SHRENDD_DIR/targetversion.yml" ]; then
      export _TARGET_VERSION=$(yq e ".shrendd.version" "$SHRENDD_DIR/targetversion.yml")
    else
      #default if not found
      export _TARGET_VERSION="0.0.0-sp"
    fi
    echo "shrendd version ($_SHRENDD_VERSION) does not match target version ($_TARGET_VERSION)"
    if [ "$_FORCE_UPSHRENDD" == "false" ]; then
      if [ "$_SHRENDD_IS_COMPATIBLE" == "true" ]; then
        if [ "$_SHRENDD_IS_UPGRADE" == "true" ]; then
          echo "downloading shrendd:$_SHRENDD_VERSION"
          if [ -d "$SHRENDD_DIR/$2" ]; then
            rm -rf "$SHRENDD_DIR/$2"
          fi
          rm -f "$SHRENDD_DIR/$2.zip"
          echo "downloading with $1...$2"
          setGettingArtifact "$2"
          eval "$1 \"$2\" \"$(shrenddOrDefault shrendd.get.src)\""
        else
          echo "It appears as though you are downgrading. That is not recommended, as it seems there were breaking changes between the version you are on and the target version. Please check the Release Notes for more information."
          _force_message="true"
        fi
      else
        echo "You are upgrading, but it seems there are breaking changes between the version you are on and the target version. Please check the Release Notes for more information."
        _force_message="true"
      fi
    else
      echo "forcing upshrendd..."
      if [ "$_SHRENDD_IS_COMPATIBLE" == "true" ]; then
        if [ "$_SHRENDD_IS_UPGRADE" == "true" ]; then
          echo "No incompatibility detected, will be forced anyways, as you wish."
        else
          echo "You are downgrading and an incompatibility was detected. The downgrade will be forced, as you wish."
        fi
      else
        echo "You are upgrading and an incompatibility was detected. The upgrade will be forced, as you wish."
      fi
      echo "downloading shrendd:$_SHRENDD_VERSION"
      if [ -d "$SHRENDD_DIR/$2" ]; then
        rm -rf "$SHRENDD_DIR/$2"
      fi
      rm -f "$SHRENDD_DIR/$2.zip"
      echo "downloading with $1...$2"
      setGettingArtifact "$2"
      eval "$1 \"$2\" \"$(shrenddOrDefault shrendd.get.src)\""
    fi
  fi
  if [ "$_force_message" == "true" ]; then
    echo "The upshrendd can be forced by re-running with the '-f' parameter."
  fi
}

#check for yq, error if not present with message
checkCommand "yq" 1

#load shrendd.yml for properties
if [ -f ./shrendd.yml ]; then
  export _SHRENDD=$(cat ./shrendd.yml)
  echo "found shrendd.yml, will use values defined there, if no value specified, will use default values."
else
  echo "no shrendd.yml found, using defaults. For more information on configuring shrendd, please see:"
  export _SHRENDD=""
fi
export _SHRENDD_DEFAULTS=$(defaultShrendd)
export SHRENDD_WORKING_DIR=$(pwd)
export SHRENDD_DIR=$(shrenddOrDefault "shrendd.dir")
export _SHRENDD_VERSION=$(shrenddOrDefault "shrendd.version")
echo "shrendd version: $_SHRENDD_VERSION"

if [ -d $(shrenddOrDefault "shrendd.test.local") ]; then
  export _GETTER="devD"
else
  if [[ -z $(checkCommand "curl" 0) ]]; then
    export _GETTER="curlD"
  else
    if [[ -z $(checkCommand "wget" 0) ]]; then
      export _GETTER="wgetD"
    else
      echo "you must have curl or wget installed to use shrendd or you can manually down load it to a directory in this project called '.shrendd'."
      exit 1
    fi
  fi
fi
export _FORCE_UPSHRENDD="false"
export _requested_help="false"
while [ $# -gt 0 ]; do
  if [[ "$1" == "-f" ]]; then
    export _FORCE_UPSHRENDD="true"
  elif [[ "$1" == "?" ]]; then
    export helped=true
    echo "Usage: used to update shrendd to the specified version."
    echo -e "  -f\n\t  force the update even if incompatibility detected."
    export _requested_help="true"
  fi
  shift
done

if [ "$_requested_help" == "false" ]; then
  cloneShrendd "$_GETTER" "shrendd"
fi
